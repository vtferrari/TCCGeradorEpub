#INTRODUÇÃO#
O desenvolvimento de software passou por incríveis mudanças desde o início da era da informática, o avanço de linguagens e formas de como trabalhar a favor das linguagens e as novas metodologias trouxeram reuso e reaproveitamento de linhas de código, transformou a linguagem estruturada, que era difícil de se compreender, e também deu suporte a sistemas antigos ou sistemas de outros programadores, trazendo ao mundo real o modelo de objetos.
Os sistemas orientados a objetos deveriam ser mais fáceis de entender, ler, dar manutenção, porém problemas parecidos com o paradigma estruturado tornaram a aparecer como: códigos extensos, inconsistentes e duplicados, obrigando especialistas a criar maneiras de tornar os sistemas padrões mais fáceis de serem modificados e compreendidos, criando linguagens de modelagem como a //Unified Modeling Language// (**UML**) e até ferramentas para melhorar a qualidade no decorrer do desenvolvimento do software. Mesmo assim o tempo, recursos e custos despendidos em direção a qualidade ainda é grande, e há o risco de no final o projeto tornar-se obsoleto.
Estudiosos de engenharia de software buscam diminuir o risco tanto da obsolescência quanto dos altos custos e tempo. Pensando nisso, Beck (2010) defende o Desenvolvimento Guiado por Testes, do inglês //Test-Driven Developement// (**__TDD__**).
Resumidamente, o **TDD** guia por meio de pequenos passos para que se alcance o Todo, que é a conclusão do projeto, baseando-se em especificações que foram previamente definidas. Dessa forma, caso precise fazer qualquer mudança, basta rodar os testes e assim garantir que o Todo continue a funcionar. 
**TDD** não é somente isso, tem muito mais a agregar e a colaborar com a engenharia de software, entretanto, mesmo com a popularização do //TDD//. A técnica é ainda subutilizada pelos desenvolvedores, já que ela não é somente uma técnica de desenvolvimento, mas também uma técnica de projeto. (__GUERRA ,2012__)
**//Beck// (__2010__)**, apresenta um conjunto de técnicas com uma linguagem acessível para qualquer engenheiro de software, com a intenção de encorajar a aplicabilidade de TDD em qualquer projeto e assim proporcionar oportunidades para que os profissionais do ramo possam trabalhar mais próximos do potencial real.
Com base na importância e colaboração que o TDD pode agregar à engenharia de software, esta pesquisa apresenta uma aplicação de **TDD** por meio de um exemplo prático. 
Este trabalho tem por objetivo desenvolver uma aplicação Web aplicando Test-Driven Development (TDD) como alternativa de garantia de qualidade no desenvolvimento de software. A aplicação deve ser capaz de interpretar texto sinalizado com caracteres especiais para marcar e transformar em um arquivo //e-Pub// (__e-book__, **livro digital**), além de estudar as métricas de qualidade na produção da aplicação, garantir a legibilidade do código produzido, analisar a escalabilidade e a tolerância à mudança de requisitos do sistema, e também a influência do TDD no design do projeto.


O desenvolvimento de um software é algo complexo e delicado, mesmo compondo uma significante parcela do nosso dia-a-dia. Profissionais de todos os ramos munem-se de aplicações de software para facilitar atividades profissionais. À medida que a complexidade do problema aumenta, a qualidade tende a diminuir, isso porque é difícil documentar todas as necessidades. Com isso surgiu uma revolução nos métodos de desenvolvimento por meio do manifesto ágil, que aconteceu em 2001. Foram definidos vários padrões tanto de modelagem quanto de desenvolvimento ou, como também métodos de melhores práticas para tentar solucionar os principais problemas de qualidade de software e entre produtos de software que satisfazem os **stakeholders. (__BECK__ //et al., 2001//)**
